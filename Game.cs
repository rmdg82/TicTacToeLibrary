using System;

namespace TicTacToeLibrary
{
    /// <summary>
    /// This class represent a TicTacToe game.
    /// </summary>
    public class Game
    {
        public Symbols[] Board { get; private set; }
        public PlayerType WhoIsPlaying { get; private set; }
        public bool IsPlaying { get; private set; }
        public IPlayer Computer { get; private set; }

        // The symbol associated with the user player. Set only at game initializing time. 
        private readonly Symbols _userSymbol;
        private readonly Symbols _computerSymbol;

        /// <summary>
        /// Constructor used as an object cloner.
        /// </summary>
        public Game(Game clonedGame)
        {
            this.Board = new Symbols[10];
            for (int i = 0; i < clonedGame.Board.Length; i++)
            {
                this.Board[i] = clonedGame.Board[i];
            }
            this.WhoIsPlaying = clonedGame.WhoIsPlaying;
            this.IsPlaying = clonedGame.IsPlaying;
            this.Computer = clonedGame.Computer;
            if (clonedGame.WhoIsPlaying == PlayerType.User)
            {
                this._userSymbol = Symbols.X;
                this._computerSymbol = Symbols.O;
            }
            else
            {
                this._userSymbol = Symbols.O;
                this._computerSymbol = Symbols.X;
            }
        }
        /// <summary>
        /// General constructor.
        /// </summary>
        /// <param name="whoPlaysFirst"></param>
        /// <param name="computer"></param>
        public Game(PlayerType whoPlaysFirst, IPlayer computer)
        {
            // Board[0] will never be used, for simplicity uses only from 1 to 9.
            Board = new Symbols[10];
            for (int i = 0; i < Board.Length; i++)
            {
                Board[i] = Symbols.Empty;
            }
            Computer = computer;
            WhoIsPlaying = whoPlaysFirst;
            IsPlaying = true;
            if (whoPlaysFirst == PlayerType.User)
            {
                _userSymbol = Symbols.X;
                _computerSymbol = Symbols.O;
            }
            else
            {
                _userSymbol = Symbols.O;
                _computerSymbol = Symbols.X;
            }
        }
        /// <summary>
        /// Print the current Board situation.
        /// </summary>
        public void PrintGame()
        {
            var stringBoard = new string[10];
            for (int i = 0; i < 10; i++)
            {
                if (Board[i] == Symbols.Empty)
                    stringBoard[i] = " ";
                else
                    stringBoard[i] = Board[i].ToString();
            }
            Console.WriteLine("-+-+-");
            Console.WriteLine(stringBoard[7] + '|' + stringBoard[8] + '|' + stringBoard[9]);
            Console.WriteLine("-+-+-");
            Console.WriteLine(stringBoard[4] + '|' + stringBoard[5] + '|' + stringBoard[6]);
            Console.WriteLine("-+-+-");
            Console.WriteLine(stringBoard[1] + '|' + stringBoard[2] + '|' + stringBoard[3]);
            Console.WriteLine("-+-+-");
        }
        /// <summary>
        /// Return true if the move is between 1 and 9 and the choosen cell is empty.
        /// </summary>
        /// <param name="move"></param>
        /// <returns></returns>
        public bool IsAdmissible(int move)
        {
            if (!(move >= 1 && move <= 9))
                return false;
            if (Board[move] != Symbols.Empty)
                return false;
            return true;
        }
        /// <summary>
        /// Return a legal move (int) by asking the user.
        /// </summary>
        /// <returns></returns>
        public int UserMove()
        {
            int move;
            Console.WriteLine("Please insert a move (1-9):");

            try
            {
                move = Convert.ToInt32(Console.ReadLine());
            }
            catch (Exception)
            {
                throw new InvalidOperationException("You must insert an integer.");
            }

            if (!IsAdmissible(move))
                throw new InvalidOperationException("Inserted move not admissible.");
            return move;

        }
        /// <summary>
        /// Return a legal move (int) generated by an IPlayer object.
        /// </summary>
        /// <returns></returns>
        public int ComputerMove()
        {
            return Computer.Move(this);
        }
        /// <summary>
        /// Return the Symbols (enum) which has to be inserted to continue the game.
        /// </summary>
        /// <returns></returns>
        public Symbols GetPlayingSymbol()
        {
            if (WhoIsPlaying == PlayerType.User)
                return _userSymbol;
            else
                return _computerSymbol;
        }
        /// <summary>
        /// Return the PlayerType (enum) which has to play to continue the game.
        /// </summary>
        /// <returns></returns>
        public PlayerType GetPlayingPlayer()
        {
            return WhoIsPlaying;
        }
        /// <summary>
        /// Switch the WhoIsPlaying field between 'User' and 'Computer'.
        /// </summary>
        public void SwitchTurn()
        {
            if (WhoIsPlaying == PlayerType.User)
                WhoIsPlaying = PlayerType.Computer;
            else
            {
                WhoIsPlaying = PlayerType.User;
            }
        }
        /// <summary>
        /// Set IsPlaying = False
        /// </summary>
        public void StopGame()
        {
            this.IsPlaying = false;
        }
        /// <summary>
        /// Check if the move is legal and change the Board. Do not adjourn other internal vars.
        /// </summary>
        /// <param name="move"></param>
        /// <param name="symbol"></param>
        public void MakeMove(int move, Symbols symbol)
        {
            // Is that move admissible?
            if (!IsAdmissible(move))
                throw new InvalidOperationException("Inserted move not admissible.");
            // WhoisPlaying match with the inserted Symbol?
            if ((WhoIsPlaying == PlayerType.User) && (symbol != _userSymbol) ||
                (WhoIsPlaying == PlayerType.Computer) && (symbol != _computerSymbol))
                throw new InvalidOperationException("Symbol doesn't match with the player who has to move now.");
            // Make the actual move modifying the board and switch turns.
            Board[move] = symbol;
        }
        /// <summary>
        /// Return true if the symbol var has a win configuration.
        /// </summary>
        /// <param name="symbol"></param>
        /// <returns></returns>
        public bool CheckWinner(Symbols symbol)
        {
            return (Board[1] == symbol && Board[2] == symbol && Board[3] == symbol) || //First line
                (Board[4] == symbol && Board[5] == symbol && Board[6] == symbol) || //Second line
                (Board[7] == symbol && Board[8] == symbol && Board[9] == symbol) || //Third line

                (Board[7] == symbol && Board[4] == symbol && Board[1] == symbol) || // First column
                (Board[8] == symbol && Board[5] == symbol && Board[2] == symbol) || // Second column
                (Board[9] == symbol && Board[6] == symbol && Board[3] == symbol) || // Third column

                (Board[7] == symbol && Board[5] == symbol && Board[3] == symbol) || // Diagonal1
                (Board[9] == symbol && Board[5] == symbol && Board[1] == symbol); // Diagonal2
        }
        /// <summary>
        /// Return true if there are no empty cells available.
        /// </summary>
        /// <returns></returns>
        public bool CheckDraw()
        {
            for (int i = 1; i < Board.Length; i++)
            {
                if (Board[i] == Symbols.Empty)
                    return false;
            }
            return true;
        }
        /// <summary>
        /// Start the game in console mode, ends when IsPlaying is false.
        /// </summary>
        ///
        public void Start()
        {
            Console.WriteLine("'{0}' is playing with '{1}'.", WhoIsPlaying, GetPlayingSymbol());
            // Find opposite player
            var oppositePlayer = (WhoIsPlaying == PlayerType.User) ? PlayerType.Computer : PlayerType.User;
            Console.WriteLine("'{0}' is playing with '{1}'.", oppositePlayer, GetPlayingSymbol() + 1);
            int move;
            while (IsPlaying)
            {
                // Check who has to make the first move
                if (WhoIsPlaying == PlayerType.User)
                {
                    try
                    {
                        move = UserMove();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        Console.WriteLine("Try again ...");
                        continue;
                    }

                    MakeMove(move, GetPlayingSymbol());
                    if (CheckWinner(GetPlayingSymbol()))
                    {
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("'{0}' wins!", WhoIsPlaying);
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("Final board:");
                        PrintGame();
                        Console.WriteLine();
                        IsPlaying = false;
                        continue;
                    }
                    if (CheckDraw())
                    {
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("It's a draw!");
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("Final board:");
                        PrintGame();
                        Console.WriteLine();
                        IsPlaying = false;
                        continue;
                    }
                    PrintGame();
                    SwitchTurn();
                }
                else
                {
                    try
                    {
                        move = ComputerMove();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        Console.WriteLine("Try again ...");
                        continue;
                    }
                    Console.WriteLine("'{0}' makes the following move: {1}", WhoIsPlaying, move);
                    MakeMove(move, GetPlayingSymbol());

                    if (CheckWinner(GetPlayingSymbol()))
                    {
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("'{0}' wins!", WhoIsPlaying);
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("Final board:");
                        PrintGame();
                        Console.WriteLine();
                        IsPlaying = false;
                        continue;
                    }

                    if (CheckDraw())
                    {
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("It's a draw!");
                        Console.WriteLine("* * * * * * * * * *");
                        Console.WriteLine("Final board:");
                        PrintGame();
                        Console.WriteLine();
                        IsPlaying = false;
                        continue;
                    }
                    PrintGame();
                    SwitchTurn();
                }
            }
        }
    }
}
